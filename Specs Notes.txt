INPUT
1. The input is a text file that contains the following:
2. The 1st line is n
    a. This represents the input and problem size (the number of points).
3. It's followed by n lines of data where each line contains two double data type values.
    a. This represents the x and y coordinates of the points.
        - One or more blank spaces separate the x and y coordinates.
        - The coordinates are NOT SORTED.
    b. Refer to the sample input text files "sample-input.txt" and "input-circle.txt"
        - sample-input.txt contains collinear points
        - input-circle.txt contains points on a circle
            - The circle has a radius of 2, whose centroid is at the origin 0, 0.
4. STRICT REQUIREMENT #1
    a. Make sure that your program will be able to store and process a maximum problem size of n = 2^15 = 32768 elements.


OUTPUT
1. The output is a text file that contains data about the convex hull.
2. 1st line encodes m
    a. This is the number of points in the convex hull.
3. It's followed by m lines
    a. Each line contains two double data type values.
    b. These values represents the x and y coordinates of the points making up the convex hull.
    c. One or more blank spaces separate the x and y coordinates.
4. STRICT REQUIREMENT #2
    a. The x, y coordinate values should be formatted such that there are 6 digits after the decimal point.
    b. The points should be listed in the output text file such that:
        - The first is the anchor
        - Followed by the succeeding points such that when the points are connected
        - They trace the convex in counterclockwise direction.


TASKS
Task #1: DESIGN AND IMPLEMENT YOUR STACK DATA STRUCTURE
    1. Implement a stack data structure with the following operations:
        a. CREATE(S)
        b. PUSH(S, elem)
        c. elem = POP(S)
        d. elem = TOP(S)
        e. ISFULL(S)
        f. ISEMPTY(S)
    2. VERY IMPORTANT
        a. Implement as an additional stack operation elem = NEXT-TO-TOP(S)
            - will return the element below the top element
            - For Example:
                1. Create a stack(s)
                2. Then, push(S, 10)
                3. Then, push(S, 20)
                4. Then, push(S, 30)
                5. Then, Tops(S) will return 40
                6. Finally, NEXT-TO-TOP(S) will return 20
        b. IMPORTANT: DECIDE AS A GROUP HOW TO REPRESENT THE STACK BETWEEN THE FOLLOWING:
            - Linked List
            - Array
    3. STRICT REQUIREMENT #3
        a. The stack should be able to store up to a maximum of n = 2^15 = 32768 elements
    4. Practice modular programming.
        a. The codes for stack data structure are stored in source files stack.h and stack.c

Task #2: IMPLEMENT TWO SORTING ALGORITHMS
    1. Sorting is crucial for Graham's Scan algorithm.
    2. Implement the two sorting ALGORITHMS
        a. Selection Sort (Slow Algo)
        b. Heap Sort (Fast Algo)
    3. VERY IMPORTANT
        a. The sorting is based on the polar angle made by the anchor point P0 with another point, Pi.
        b. The anchor point is the point with the lowest (minimum y coordinate).
        c. If there are several points with the same minimum y coordinate
            - choose the point with the lower x coodinate
            
Task #3: IMPLEMENT TWO VERSIONS OF GRAHAM'S SCAN ALGORITHM
    1. Implement Graham's Scan algorithm
        - call the functions for sorting
        - call the functions for stack operations
    2. There should be two versions
        - A Slow Sorting Algorithm (First Version)
        - A Fast Sorting Algorithm (Second Version)
    3. STRICT REQUIREMENT #4
        - It should have a rintf() statement that displays the elapsed time
            - Both versions should have this
            - in milliseconds
            - Between the start and end of the algorithm implementatione execution
        - Make use of the empirical-time.c C program
        - Learn how to compute for the elapsed time using the clock() library function
    4. Practice Modular programming
        - Solutions should be in two separate source files named:
            a. graham_scan1.c (for the slow version)
            b. graham_scan2.c (for the fast version)

Task #4: IMPLEMENT TWO DRIVER PROGRAMS TO TEST THE TWO VERSIONS
    1. 